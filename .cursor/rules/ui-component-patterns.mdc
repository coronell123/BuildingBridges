# UI Component Patterns & Design System

## **Component Architecture**

### **✅ DO: Organized Component Structure**
```
components/
├── layout/           # Navigation, footer, global layout
├── ui/              # Reusable UI primitives
├── shared/          # Shared business components
└── onboarding/      # Feature-specific components
```

### **Component Naming**
- **PascalCase**: Component files and exports
- **kebab-case**: File names when containing multiple words
- **Descriptive**: Clear purpose (e.g., `UserProfileCard`, `LoginForm`)

## **Design System Integration**

### **✅ DO: Use Design Tokens**
```typescript
// lib/design-system/config/colors.ts
export const colors = {
  primary: {
    50: '#f0f9ff',
    500: '#3b82f6',
    900: '#1e3a8a',
  },
  semantic: {
    success: '#22c55e',
    warning: '#f59e0b',
    error: '#ef4444',
  },
} as const;

// Usage in components
import { colors } from '@/lib/design-system/config/colors';

const Button = ({ variant = 'primary' }) => (
  <button className={`bg-${colors.primary[500]} text-white`}>
    Click me
  </button>
);
```

### **Typography System**
```typescript
// lib/design-system/config/typography.ts
export const typography = {
  heading: {
    h1: 'text-4xl font-bold leading-tight',
    h2: 'text-3xl font-semibold leading-tight',
    h3: 'text-2xl font-semibold leading-snug',
  },
  body: {
    large: 'text-lg leading-relaxed',
    base: 'text-base leading-normal',
    small: 'text-sm leading-normal',
  },
} as const;
```

## **Form Components**

### **✅ DO: Accessible Form Patterns**
```typescript
// components/ui/input.tsx
import { forwardRef } from 'react';
import { cn } from '@/lib/utils';

interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  helper?: string;
}

export const Input = forwardRef<HTMLInputElement, InputProps>(
  ({ label, error, helper, className, ...props }, ref) => {
    const id = props.id || `input-${Math.random().toString(36).substr(2, 9)}`;
    
    return (
      <div className="space-y-2">
        {label && (
          <label htmlFor={id} className="block text-sm font-medium text-gray-700">
            {label}
          </label>
        )}
        <input
          ref={ref}
          id={id}
          className={cn(
            'w-full px-3 py-2 border border-gray-300 rounded-md',
            'focus:outline-none focus:ring-2 focus:ring-blue-500',
            'disabled:bg-gray-50 disabled:text-gray-500',
            error && 'border-red-500 focus:ring-red-500',
            className
          )}
          {...props}
        />
        {error && (
          <p className="text-sm text-red-600" role="alert">
            {error}
          </p>
        )}
        {helper && !error && (
          <p className="text-sm text-gray-500">{helper}</p>
        )}
      </div>
    );
  }
);

Input.displayName = 'Input';
```

### **Form State Management**
```typescript
// components/forms/LoginForm.tsx
'use client';

import { useFormState } from 'react-dom';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { signInAction } from '@/app/(login)/actions';

export default function LoginForm() {
  const [state, formAction, isPending] = useFormState(signInAction, {
    error: '',
    success: ''
  });

  return (
    <form action={formAction} className="space-y-6">
      <Input
        type="email"
        name="email"
        label="E-Mail-Adresse"
        placeholder="ihre.email@example.com"
        required
        error={state.error}
      />
      
      <Input
        type="password"
        name="password"
        label="Passwort"
        placeholder="Ihr Passwort"
        required
      />
      
      <Button
        type="submit"
        disabled={isPending}
        className="w-full"
      >
        {isPending ? 'Anmelden...' : 'Anmelden'}
      </Button>
    </form>
  );
}
```

## **Layout Components**

### **✅ DO: Responsive Navigation**
```typescript
// components/layout/navbar.tsx
'use client';

import { useState } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { usePathname } from 'next/navigation';
import { cn } from '@/lib/utils';

const navigation = [
  { name: 'Home', href: '/' },
  { name: 'Mentors', href: '/mentors' },
  { name: 'Workshops', href: '/workshops' },
  { name: 'Kontakt', href: '/contact' },
];

export default function Navbar() {
  const [isOpen, setIsOpen] = useState(false);
  const pathname = usePathname();

  return (
    <nav className="bg-white shadow-sm border-b">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Logo */}
          <Link href="/" className="flex items-center">
            <Image
              src="/logo_buildingBridges.svg"
              alt="Building Bridges"
              width={40}
              height={40}
              className="h-8 w-auto"
            />
            <span className="ml-2 text-xl font-bold text-gray-900">
              Building Bridges
            </span>
          </Link>

          {/* Desktop Navigation */}
          <div className="hidden md:flex space-x-8">
            {navigation.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className={cn(
                  'px-3 py-2 text-sm font-medium transition-colors',
                  pathname === item.href
                    ? 'text-blue-600 border-b-2 border-blue-600'
                    : 'text-gray-700 hover:text-blue-600'
                )}
              >
                {item.name}
              </Link>
            ))}
          </div>

          {/* Mobile menu button */}
          <button
            onClick={() => setIsOpen(!isOpen)}
            className="md:hidden p-2 rounded-md text-gray-700 hover:bg-gray-100"
          >
            <span className="sr-only">Menü öffnen</span>
            {/* Hamburger icon */}
            <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>

        {/* Mobile Navigation */}
        {isOpen && (
          <div className="md:hidden border-t border-gray-200">
            <div className="px-2 pt-2 pb-3 space-y-1">
              {navigation.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className={cn(
                    'block px-3 py-2 text-base font-medium rounded-md transition-colors',
                    pathname === item.href
                      ? 'text-blue-600 bg-blue-50'
                      : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'
                  )}
                  onClick={() => setIsOpen(false)}
                >
                  {item.name}
                </Link>
              ))}
            </div>
          </div>
        )}
      </div>
    </nav>
  );
}
```

## **Card Components**

### **✅ DO: Flexible Card System**
```typescript
// components/ui/card.tsx
import { cn } from '@/lib/utils';

interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: 'default' | 'elevated' | 'outlined';
  padding?: 'none' | 'sm' | 'md' | 'lg';
}

export function Card({ 
  className, 
  variant = 'default', 
  padding = 'md',
  ...props 
}: CardProps) {
  return (
    <div
      className={cn(
        'rounded-lg border bg-white',
        {
          'shadow-sm': variant === 'default',
          'shadow-lg': variant === 'elevated',
          'border-2': variant === 'outlined',
        },
        {
          'p-0': padding === 'none',
          'p-4': padding === 'sm',
          'p-6': padding === 'md',
          'p-8': padding === 'lg',
        },
        className
      )}
      {...props}
    />
  );
}

export function CardHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div className={cn('flex flex-col space-y-1.5', className)} {...props} />
  );
}

export function CardTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {
  return (
    <h3 className={cn('text-lg font-semibold leading-none tracking-tight', className)} {...props} />
  );
}

export function CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div className={cn('pt-0', className)} {...props} />
  );
}
```

## **Loading States**

### **✅ DO: Consistent Loading Patterns**
```typescript
// components/shared/LoadingState.tsx
interface LoadingStateProps {
  size?: 'sm' | 'md' | 'lg';
  text?: string;
  className?: string;
}

export function LoadingState({ 
  size = 'md', 
  text = 'Laden...', 
  className 
}: LoadingStateProps) {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-6 w-6',
    lg: 'h-8 w-8',
  };

  return (
    <div className={cn('flex items-center justify-center space-x-2', className)}>
      <div className={cn('animate-spin rounded-full border-2 border-gray-300 border-t-blue-600', sizeClasses[size])} />
      {text && <span className="text-gray-600">{text}</span>}
    </div>
  );
}

// Usage in components
export function UserProfile({ userId }: { userId: string }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchUser(userId).then(setUser).finally(() => setLoading(false));
  }, [userId]);

  if (loading) {
    return <LoadingState text="Profil wird geladen..." />;
  }

  return <div>{/* User profile content */}</div>;
}
```

## **Error Handling**

### **✅ DO: User-Friendly Error States**
```typescript
// components/shared/ErrorState.tsx
interface ErrorStateProps {
  title?: string;
  message?: string;
  actionLabel?: string;
  onAction?: () => void;
  className?: string;
}

export function ErrorState({
  title = 'Fehler aufgetreten',
  message = 'Etwas ist schief gelaufen. Bitte versuchen Sie es erneut.',
  actionLabel = 'Erneut versuchen',
  onAction,
  className
}: ErrorStateProps) {
  return (
    <div className={cn('text-center py-8', className)}>
      <div className="mx-auto w-12 h-12 rounded-full bg-red-100 flex items-center justify-center mb-4">
        <svg className="w-6 h-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
        </svg>
      </div>
      
      <h3 className="text-lg font-medium text-gray-900 mb-2">{title}</h3>
      <p className="text-gray-600 mb-4">{message}</p>
      
      {onAction && (
        <button
          onClick={onAction}
          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          {actionLabel}
        </button>
      )}
    </div>
  );
}
```

## **Media Components**

### **✅ DO: Optimized Media Handling**
```typescript
// components/shared/VideoPlayer.tsx
interface VideoPlayerProps {
  src: string;
  poster?: string;
  className?: string;
  autoPlay?: boolean;
}

export function VideoPlayer({ 
  src, 
  poster, 
  className, 
  autoPlay = false 
}: VideoPlayerProps) {
  return (
    <div className={cn('relative overflow-hidden rounded-lg', className)}>
      <video
        controls
        className="w-full h-auto"
        poster={poster}
        autoPlay={autoPlay}
        muted={autoPlay} // Required for autoplay
      >
        <source src={src} type="video/mp4" />
        <p className="text-center text-gray-600 py-4">
          Ihr Browser unterstützt das Video-Element nicht.
        </p>
      </video>
    </div>
  );
}

// Usage
<VideoPlayer
  src="/3D Explainer Video Toolkit_free (1).mp4"
  poster="/video-poster.jpg"
  className="max-w-4xl mx-auto"
/>
```

## **Accessibility Patterns**

### **✅ DO: ARIA and Semantic HTML**
```typescript
// components/ui/button.tsx
import { forwardRef } from 'react';
import { cn } from '@/lib/utils';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  loading?: boolean;
}

export const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ 
    className, 
    variant = 'primary', 
    size = 'md', 
    loading = false,
    disabled,
    children,
    ...props 
  }, ref) => {
    const isDisabled = disabled || loading;
    
    return (
      <button
        ref={ref}
        className={cn(
          'inline-flex items-center justify-center rounded-md font-medium transition-colors',
          'focus:outline-none focus:ring-2 focus:ring-offset-2',
          'disabled:pointer-events-none disabled:opacity-50',
          {
            'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500': variant === 'primary',
            'bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500': variant === 'secondary',
            'border border-gray-300 bg-white hover:bg-gray-50 focus:ring-gray-500': variant === 'outline',
            'hover:bg-gray-100 focus:ring-gray-500': variant === 'ghost',
          },
          {
            'h-8 px-3 text-sm': size === 'sm',
            'h-10 px-4 text-sm': size === 'md',
            'h-12 px-6 text-base': size === 'lg',
          },
          className
        )}
        disabled={isDisabled}
        aria-disabled={isDisabled}
        {...props}
      >
        {loading && (
          <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
        )}
        {children}
      </button>
    );
  }
);

Button.displayName = 'Button';
```

## **Responsive Design**

### **✅ DO: Mobile-First Approach**
```typescript
// components/layout/hero.tsx
export function Hero() {
  return (
    <section className="relative min-h-screen flex items-center justify-center">
      {/* Background Image */}
      <div className="absolute inset-0 z-0">
        <Image
          src="/coverimage.png"
          alt="Building Bridges Cover"
          fill
          className="object-cover"
          priority
        />
        <div className="absolute inset-0 bg-gradient-to-r from-black/40 via-black/20 to-black/40" />
      </div>
      
      {/* Content */}
      <div className="relative z-10 text-center text-white px-4 sm:px-6 lg:px-8">
        <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold mb-6">
          <span className="block">Building</span>
          <span className="block text-yellow-400">Bridges</span>
        </h1>
        
        <p className="text-lg sm:text-xl md:text-2xl mb-8 max-w-3xl mx-auto">
          Empowering girls and FLINTA* of Colour through mentorship and academic support
        </p>
        
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <Button size="lg" className="bg-yellow-500 hover:bg-yellow-600">
            Jetzt teilnehmen
          </Button>
          <Button variant="outline" size="lg" className="border-white text-white hover:bg-white hover:text-gray-900">
            Mehr erfahren
          </Button>
        </div>
      </div>
    </section>
  );
}
```
description:
globs:
alwaysApply: false
---
